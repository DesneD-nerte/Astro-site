---
import type { Card } from "../types/Card";

interface Props extends Card {}

const { id, title, price, image } = Astro.props;

const STRAPI_URL = import.meta.env.PUBLIC_STRAPI_API_URL;

---

<div class="col-xl-3 g-5">
	<div id="link-card" class="h-100 card card-bordered">
		<a href={"/products/" + id} class="d-flex flex-column h-100">
			<div id={`card-image-${id}`} class="d-flex flex-center h-100">
				{image 
					? <div>
						<img class="w-100 h-100" src={STRAPI_URL + image[0].url}/>
					</div>
					: <p>No image</p>
				}
			</div>
			<div class="d-flex flex-column card-footer">
				<div>
					<h2 id={`card-title-${id}`}>
						{title}
					</h2>
				</div>
				<div class="d-flex mt-3">
					<p class="fs-6">$</p>
					<p id={`card-price-${id}`} class="fs-1 fw-bold ms-1">
						{price}
					</p>
				</div>
			</div>
		</a>
	</div>
</div>

<script>
    import type { Product } from "../types/Product";
	import { getCardObject } from "../utils/jsonResponse";
	import { addListener } from "../utils/socket.io";
	const STRAPI_URL = import.meta.env.PUBLIC_STRAPI_API_URL;

	addListener("productsChanged", async (responseData: {data: Product}) => {
		const { data } = responseData;
        const image_Div = document.getElementById(`card-image-${data.id}`) as HTMLDivElement;
        const title_H2 = document.getElementById(`card-title-${data.id}`) as HTMLHeadingElement;
        const price_P = document.getElementById(`card-price-${data.id}`) as HTMLParagraphElement;

		const cardProps = getCardObject(data);

		image_Div.innerHTML = cardProps.image
			? `<div> <img style="height: 100%; width: 100%" src=${STRAPI_URL + cardProps.image[0].url}></div>`
			: `<p style="color: #444">No image</p>`;
		title_H2.textContent = cardProps.title;
		price_P.textContent = cardProps.price;
    })

</script>

<style>

	#link-card {
		background-color: white;
		background-image: var(--accent-gradient);
		background-size: 400%;
		border-radius: 0.5rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
	}

	#link-card > a {
		width: 100%;
		text-decoration: none;
		background-color: white;
		opacity: 0.9;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		
		overflow: hidden;
		white-space: nowrap;
		text-overflow: ellipsis;
	}
	p {
		color: #444;
	}
	#link-card:is(:hover, :focus-within) {
		background-position: 0;
	}
	#link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
	#link-card:is(:hover, :focus-within) p {
		color: rgb(var(--accent));
	}
</style>
