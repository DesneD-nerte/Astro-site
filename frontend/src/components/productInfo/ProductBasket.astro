---
import type { User } from "../../types/User";

interface UserDataProps {
    myData: User,
}

const { myData } = Astro.props;

const userProducts = JSON.stringify({userId: myData.id, products: myData.Cart.products});
---

<input id="user-products-input" class="d-none" type="text" value={userProducts}/>
<button type="button" id="kt_docs_sweetalert_basic" class="btn btn-success h-30px mt-2 p-0">Add product to basket</button>
<button type="button" id="kt_docs_sweetalert_state_warning" class="btn btn-warning h-30px mt-2 p-0">Remove product from basket</button>

<script>
    const idProduct = window.location.href.split("/").pop() as string;

    const cartProductsInput = document.getElementById("user-products-input") as HTMLInputElement;
    const buttonAdd = document.getElementById('kt_docs_sweetalert_basic') as HTMLButtonElement;
    const buttonRemove = document.getElementById('kt_docs_sweetalert_state_warning') as HTMLButtonElement;

    buttonAdd.addEventListener("click", function() {
        addProduct();
    })
    buttonRemove.addEventListener("click", function() {
        removeProduct();
    })

    function addProduct() {
        const {userId, products} = JSON.parse(cartProductsInput.value);

        const productExisted = products.find((oneProduct: any) => {
            return (oneProduct.id == idProduct);
        });

        if(!productExisted) {
            products.push({id: idProduct});
            cartProductsInput.value = JSON.stringify({userId, products});

            putProductBasket(userId, products);
        }
    }

    function removeProduct() {
        const {userId, products} = JSON.parse(cartProductsInput.value);

        const productExisted = products.find((oneProduct: any) => {
            return (oneProduct.id == idProduct);
        });

        if(productExisted) {
            const indexProduct = products.indexOf(productExisted);
            products.splice(indexProduct, 1);
            cartProductsInput.value = JSON.stringify({userId, products});

            putProductBasket(userId, products);
        }
    }

    async function putProductBasket(userId: string, products: any) {
        const productResponse = await fetch(`/api/users/${userId}`, {
            method: "PUT",
            body: JSON.stringify({
                "Cart": {
                    "products": products
                }
            })
        });
    }
</script>

<script is:inline>

    const buttonAdd = document.getElementById('kt_docs_sweetalert_basic');
    buttonAdd.addEventListener('click', e => {
        e.preventDefault();

        Swal.fire({
            text: "Product was added!",
            icon: "success",
            buttonsStyling: false,
            confirmButtonText: "Ok, got it!",
            customClass: {
                confirmButton: "btn btn-primary"
            }
        });
    });

    const buttonDelete = document.getElementById('kt_docs_sweetalert_state_warning');
    buttonDelete.addEventListener('click', e => {
        e.preventDefault();

        Swal.fire({
            text: "Product was removed!",
            icon: "warning",
            buttonsStyling: false,
            confirmButtonText: "Ok, got it!",
            customClass: {
                confirmButton: "btn btn-primary"
            }
        });
    });
</script>